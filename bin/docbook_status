#!/usr/bin/env ruby
# -*-encoding:utf-8 ; mode:ruby-*-
##
# docbook_status is the commandline application for the library.  Its
# main purpose is to display the structure and word counts for DocBook
# 5 documents.
#

require 'rubygems'
require 'optparse'
require 'yaml'
require 'zucker/env'
# For Windows and/or Ruby 1.8
begin
  require 'json'
  @json_available = true
rescue LoadError
  @json_available = false
end

# Windows (RubyInstaller) needs the additional gem.
# If not present create dummies for the color routines.
if OS.windows?
  begin
    require 'win32console'
    require 'term/ansicolor'
    class String
      include Term::ANSIColor
    end
  rescue LoadError
    class String
      def red; self; end
      def green; self; end
      def magenta; self; end
      def bold; self; end
    end
  end
else
  require 'term/ansicolor'
  class String
    include Term::ANSIColor
  end
end

require File.expand_path(File.join(File.dirname(__FILE__), %w[.. lib docbook_status]))

NOVAL = -1

@demon = false
@glob = '*.xml'
@dir = '.'
@pre = []
@remarks = false
@remarks_filter = []
@output_format = :screen
@total_words = NOVAL
@daily_words = NOVAL
@end_date = NOVAL

banner = <<EOB
docbook_status, Version #{DocbookStatus.version}

Display DocBook 5 document structure and word counts.

Usage: docbook_status [options] <DOCBOOK-FILE>
EOB

opts = OptionParser.new
opts.banner = banner
opts.on('--pre COMMAND', String, 'A shell command that should be executed first') {|val| @pre << val}
opts.on('--remarks[=FILTER]', String, 'Show the remarks, comments. Use a keyword FILTER to restrict the listing') {|val|
  @remarks = true
  unless (val.nil? || val.empty?)
    @remarks_filter << val
  end
}
opts.on('--end[=DATE]', String, 'Goal: planned delivery date, YYYY-MM-DD') {|val|
  if val.nil?
    @end_date = nil
  else
    @end_date = Date.parse(val)
  end
}
opts.on('--total[=WORDS]',Integer, 'Goal: total number of words') {|val|
  if val.nil?
    @total_words = 0
  else
    @total_words = val.abs
  end}
opts.on('--daily[=WORDS]',Integer, 'Goal: daily number of words') {|val|
  if val.nil?
    @daily_words = 0
  else
    @daily_words = val.abs
  end}
opts.on('--outputformat=yaml|json',['json','yaml'],'Return the result in YAML or JSON format') {|format|
  case
  when format == 'yaml'
    @output_format = :yaml
  when format == 'json'
    if @json_available
      @output_format = :json
    else
      @output_format = :screen
      STDERR.puts "JSON support not available. Please install the json gem first."
      exit 1
    end
  else
    STDERR.puts "Unknown output format #{format}. Using screen output."
    @output = :screen
  end
}
rest = opts.parse(ARGV)

# See, if there is need to track the writing progress.
def history_on?()
  (DocbookStatus::History.exists? || @end_date != NOVAL || @total_words != NOVAL || @daily_words != NOVAL)
end


# Color the actuals according to the schema
#
# * bold red if <= 30%
# * red if > 30% and <= 70%
# * magenta if >70 and < 100%
# * green if >= 100%
#
def meter(actual,goal)
  ad = actual.to_f / goal.to_f
  percs = ""
  case
  when ad <= 0.3
    fct = lambda {|s| s.red.bold}
  when ad > 0.3 && ad <= 0.7
    fct = lambda {|s| s.red}
  when ad > 0.7 && ad < 1.0
    fct = lambda {|s| s.magenta}
  else
    fct = lambda {|s| s.green}
  end
  [actual.to_s,"%3.0f\%" % (ad*100)].map {|s| fct.call(s)}
end

# Format the output for the screen and print it
#
def output_terminal(doc_info)

  # Header
  puts
  puts "File:               #{doc_info[:file]}"
  puts "Modified:           #{doc_info[:modified]}"

  # Goal section
  unless doc_info[:goals].nil?
    gdend = doc_info[:goals][:end]
    gwtotal = doc_info[:goals][:goal_total]
    gwdaily = doc_info[:goals][:goal_daily]
    unless gwtotal == 0
      tactual = doc_info[:sections][0][:words]
      (tactuals,tactperc) = meter(tactual,gwtotal)
    end
    unless gwdaily == 0
      # Coloring the actuals
      dactual = doc_info[:today][:end] - doc_info[:today][:start]
      (dactuals,dactperc) = meter(dactual,gwdaily)
    end
    unless gdend.nil?
      dstart = doc_info[:goals][:start]
      ddur = (gdend - dstart).round
      ddiff = (gdend - Date.today).round
      dsleft = case
               when ddiff == 0 then 'today'
               when ddiff > 0 then "#{ddiff} day(s) left"
               else "#{ddiff} day(s) behind schedule"
               end
    end
    unless (gdend.nil? && gwtotal == 0 && gwdaily == 0)
      puts "Goals".bold
      puts "Delivery:           #{dsleft}, #{gdend}" unless gdend.nil?
      puts "Words, total:       #{tactperc} #{tactuals}/#{gwtotal}" unless gwtotal == 0
      puts "Words, daily:       #{dactperc} #{dactuals}/#{gwdaily}" unless gwdaily == 0
    end
  end
  # Structure
  puts
  puts "Document structure".bold
  puts "%-57.57s %-16s %5s" % ['Title','Tag','Words']
  puts "-"*80
  doc_info[:sections].each do |s|
    puts "%-57.57s %-16s %5d" % [(' ' * s[:level])+s[:title], s[:tag], s[:words]]
  end
  #Remarks
  if doc_info[:remarks]
    puts
    puts "Remarks".bold
    puts "%-10.10s %20.20s %5s %-52s" % %w[Type File Line Content]
    puts "-"*80
    doc_info[:remarks].each do |r|
      puts "%-10.10s %20.20s %5d %-42.42s" % ["#{r[:keyword]}",r[:file],r[:line],r[:text]]
      puts "%s %-42.42s" % [' '*37,r[:text][42..84]] if r[:text].length > 42
    end
  end
end

# Processes the DocBook document once. Runs first all defined
# preprocessing (--pre) commands. Checks then for a DocBook namespace
# declaration, which would imply DocBook 5. If the namespaces include
# the XInclude-NS, XInclude-processing is started. At last the
# resulting document is analyzed.
#
# If history processing is on the writing progress is recorded.
#
def run(file)
  # OPTIMIZE Detailed output for --pre commands with popen4?
  @pre.each { |cmd|
    ret = system(cmd)
    unless ret
        STDERR.puts "Error: This preprocessing command signalled failure (#{$?}), please check --> #{cmd}"
        return
    end
  }
  dbs = DocbookStatus::Status.new(file)
  doc_info = dbs.analyze_file
  doc_info[:remarks] = dbs.find_remarks(@remarks_filter) if @remarks
  if history_on?()
    dbs_h = DocbookStatus::History.new(file)
    dbs_h.planned_end(@end_date) if @end_date != NOVAL
    dbs_h.total_words(@total_words) if @total_words != NOVAL
    dbs_h.daily_words(@daily_words) if @daily_words != NOVAL
    dbs_h.add(DateTime.now,doc_info[:sections][0][:words])
    dbs_h.save
    doc_info[:goals] = dbs_h.goals
    doc_info[:today] = dbs_h.today
  end
  case
  when @output_format == :yaml
    YAML.dump(doc_info,STDOUT)
  when @output_format == :json
    STDOUT.puts doc_info.to_json
  else
    output_terminal(doc_info)
  end
end

# Print banner if called without arguments
if rest.length < 1
  puts opts.to_s
  exit 1
end

unless File.exists?(rest[0])
  STDERR.puts "Error: File #{rest[0]} not found."
  exit 1
end

# The main routine
puts("docbook_status, Version #{DocbookStatus.version}") if @output_format == :screen
run(rest[0])
exit 0

